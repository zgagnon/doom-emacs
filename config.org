#+begin_src elisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;; $doomdir/packages.el
#+end_src

#+begin_src elisp :tangle config.el
;; config.el -*- lexical-binding: t; -*-
#+end_src

#+begin_src elisp :tangle init.el
;; init.el -*- lexical-binding: t; -*-
#+end_src
* Doom Configuration
** Table Of Contents
*** Programming Project
**** [[Typescript]]
**** [[Dotnet]]
**** [[Elixir]]
**** [[COBOL]]
*** Package Configuration
**** Editor Configuration
***** [[Editor]]
***** [[Projectile]]
***** [[Super Save]]
***** [[Theme]]
***** [[Perspective]]
***** [[Font Config]]
**** Minor Modes
***** [[Identity]]
***** [[Tailwind]]
***** [[Copilot]]
***** [[Org Mode]]
***** [[LSP]]
***** [[Just]]
***** [[CSV]]
*** [[Doom Packages]]

** Project Types

These are custom configurations for various project types. Most of
these depend on having the correct packages enabled in [[Doom Packages]].

*** Typescript
**** Language Configuration
#+begin_src elisp :tangle packages.el
(package! treesit-auto)
#+end_src

#+begin_src elisp :tangle config.el
(use-package! treesit-auto
  :config
  (global-treesit-auto-mode))

(use-package! typescript-ts-mode
  :mode (("\\.ts\\'" . typescript-ts-mode)
         ("\\.tsx\\'" . tsx-ts-mode))
  :config
  (add-hook! '(typescript-ts-mode-hook tsx-ts-mode-hook) #'lsp!))
#+end_src

**** Projectile Projects
#+begin_src elisp
(after! projectile
  (projectile-register-project-type 'bun
                                    '("bun.lockb")
                                    :project-file "package.json"
                                    :compile "bun run build"
                                    :test "bun run test"
                                    :test-prefix ".test"
                                    :src-dir "src/"
                                    :configure "bun install"
                                    :run "bun run serve"))


(after! projectile
  (map! :localleader
        :map projectile-mode-map
        "p" #'projectile-project-name))

(after! projectile
  (projectile-register-project-type 'pnpm
                                    '("pnpm-lock.yaml")
                                    :project-file "package.json"
                                    :compile "pnpm run build"
                                    :test "pnpm run test"
                                    :test-prefix ".test"
                                    :src-dir "src/"
                                    :configure "pnpm install"
                                    :run "pnpm run serve"))

#+end_src

*** Dotnet
**** Projectile Projects

#+begin_src elisp
(after! projectile
  (projectile-register-project-type 'dotnet
                                    '("*.csproj")
                                    :project-file "*.csproj"
                                    :compile "dotnet build"
                                    :test "dotnet test"
                                    :test-prefix ".test"
                                    :src-dir ""
                                    :configure "dotnet restore"))


#+end_src

*** Elixir

**** Font Prettification

These are some elixir-specific ligatures

#+begin_src elisp
(add-hook
 'elixir-mode-hook
 (lambda ()
   (push '(">=" . ?\u2265) prettify-symbols-alist)
   (push '("<=" . ?\u2264) prettify-symbols-alist)
   (push '("!=" . ?\u2260) prettify-symbols-alist)
   (push '("==" . ?\u2A75) prettify-symbols-alist)
   (push '("=~" . ?\u2245) prettify-symbols-alist)
   (push '("<-" . ?\u2190) prettify-symbols-alist)
   (push '("->" . ?\u2192) prettify-symbols-alist)
   (push '("<-" . ?\u2190) prettify-symbols-alist)
   (push '("|>" . ?\u25B7) prettify-symbols-alist)))
 #+end_src

**** LSP Configuration


#+begin_src elisp
(setq lsp-elixir-fetch-deps t)
(setq lsp-elixir-suggest-specs t)
(setq lsp-elixir-signature-after-complete t)
(setq lsp-elixir-enable-test-lenses t)
(after! lsp-mode
  (setq lsp-elixir-local-server-command "/etc/profiles/per-user/zell/bin/elixir-ls"))
(use-package lsp-mode
  :config
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]\\.node_modules\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]deps\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\].data\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\].direnv\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\].elixir_ls\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\].local\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]_build\\'"))
#+end_src

**** COBOL

#+begin_src elisp :tangle packages.el
(package! cobol-mode)
#+end_src

** Package Configuration



:PROPERTIES:
:header-args: :tangle config.el
:END:

Whenever you reconfigure a package, make sure to wrap your config in an
`after!' block, otherwise Doom's defaults may override your settings. E.g.

(after! PACKAGE
(setq x y))

The exceptions to this rule:

- Setting file/directory variables (like `org-directory')
- Setting variables which explicitly tell you to set them before their
package is loaded (see 'C-h v VARIABLE' to look up their documentation).
- Setting doom variables (which start with 'doom-' or '+').

Here are some additional functions/macros that will help you configure Doom.

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to
this file. Emacs searches the `load-path' when you load packages with
`require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over
the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.
Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
etc).

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
they are implemented.



*** Identity

#+begin_src elisp
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
(setq user-full-name "Zoe Gagnon"
      user-mail-address "zoe@zgagnon.com")
#+end_src

*** Just

#+begin_src elisp :tangle packages.el
(package! just-mode)
#+end_src

*** CSV

#+begin_src elisp :tangle packages.el
(package! csv-mode)
#+end_src

*** Tailwind
#+begin_src elisp :tangle packages.el
(package! lsp-tailwindcss :recipe (:host github :repo "merrickluo/lsp-tailwindcss"))
#+end_src

#+begin_src elisp 
(use-package! lsp-tailwindcss)
#+end_src




*** LSP

Global lsp config

#+begin_src elisp :tangle early-init.el
(setenv "LSP_USE_PLISTS" "true")
#+end_src


#+begin_src elisp
(setq read-process-output-max (* 1024 1024))
(setq gc-cons-threshold 100000000)
#+end_src




*** Super Save

[[https://github.com/bbatsov/super-save][Super-Save]] is a minor mode to save on window events.

#+begin_src elisp :tangle packages.el
(package! super-save)
;(use-package! super-save)

#+end_src

In order for it to hook in to org mode, we need to load it after that
 #+begin_src elisp :tangle config.el

(after! org
  (super-save-mode +1))

(setq auto-save-default nil)
 #+end_src


*** Projectile

#+begin_src elisp :tangle packages.el
(use-package rg
  :ensure t
  :config
  (rg-enable-default-bindings))

#+end_src

#+begin_src elisp
(setq projectile-generic-command "fd --type --print0")
(setq projectile-require-project-root nil)
#+end_src


*** Theme

#+begin_src elisp
(setq doom-theme 'doom-one)
#+end_src

*** Perspective

Actually [[https://github.com/Bad-ptr/persp-mode.el][Persp-mode]]

**** Create a tab bar across the top of the screen
#+begin_src elisp
(after! persp-mode
  ;; alternative, non-fancy version which only centers the output of +workspace--tabline
  (defun workspaces-formatted ()
    (+doom-dashboard--center (frame-width) (+workspace--tabline)))

  (defun hy/invisible-current-workspace ()
    "The tab bar doesn't update when only faces change (i.e. the
current workspace), so we invisibly print the current workspace
name as well to trigger updates"
    (propertize (safe-persp-name (get-current-persp)) 'invisible t))

  (customize-set-variable 'tab-bar-format '(workspaces-formatted tab-bar-format-align-right hy/invisible-current-workspace))

  ;; don't show current workspaces when we switch, since we always see them
  (advice-add #'+workspace/display :override #'ignore)
  ;; same for renaming and deleting (and saving, but oh well)
  (advice-add #'+workspace-message :override #'ignore))

;; need to run this later for it to not break frame size for some reason
(run-at-time nil nil (cmd! (tab-bar-mode +1)))
#+end_src

**** Make the tab bar look good with custom faces

#+begin_src elisp :tangle config.el
(custom-set-faces!
  '(+workspace-tab-face :inherit default :family "Jost" :height 135)
  '(+workspace-tab-selected-face :inherit (highlight +workspace-tab-face)))

(after! persp-mode
  (defun workspaces-formatted ()
    ;; fancy version as in screenshot
    (+doom-dashboard--center (frame-width)
        (let ((names (or persp-names-cache nil))
                (current-name (safe-persp-name (get-current-persp))))
        (mapconcat
        #'identity
        (cl-loop for name in names
                for i to (length names)
                collect
                (concat (propertize (format " %d" (1+ i)) 'face
                        `(:inherit ,(if (equal current-name name)
                                        '+workspace-tab-selected-face
                                        '+workspace-tab-face)
                        :weight bold))
                (propertize (format " %s " name) 'face
                        (if (equal current-name name)
                                '+workspace-tab-selected-face
                        '+workspace-tab-face))))
        " "))))
;; other persp-mode related configuration
)
#+end_src

*** Font Config

#+begin_src elisp
(setq doom-font (font-spec :family "FiraCode Nerd Font" :size 18 :weight 'medium)
     doom-variable-pitch-font (font-spec :family "FiraCode Nerd Font" :size 18)
      doom-symbol-font (font-spec :family "FiraCode Nerd Font" :size 18)
      doom-serif-font (font-spec :family "FiraCode Nerd Font" :size 18))
#+end_src

*** Editor

#+begin_src elisp
(setq display-line-numbers-type t)
(setq-default tab-width 2)
(global-visual-line-mode 1)
(if (display-graphic-p)
    (progn
      (setq initial-frame-alist
            '((tool-bar-lines . 0)
              (width . 200)
              (height . 400)
              )
            )
      )
  )
#+end_src

*** Org Mode

#+begin_src elisp
(setq org-directory "~/org/")


(custom-set-faces!
  `(org-level-1 :family "Luminari" :height 400)
  `(org-level-2 :family "Cochin" :height 300)
  `(org-level-3 :family "Rockwell" :height 200)
  `(org-level-4 :family "Rockwell" :height 150)
  `(org-level-5 :family "Rockwell" :height 150)
  `(org-level-6 :family "Rockwell" :height 150)
                )

#+end_src

*** Copilot

#+begin_src elisp :tangle packages.el
(package! copilot
  :recipe (:host github :repo "copilot-emacs/copilot.el" :files ("*.el" "dist")))
#+end_src

#+begin_src elisp
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("<tab>" . 'copilot-accept-completion)
              ("TAB" . 'copilot-accept-completion)
              ("C-TAB" . 'copilot-accept-completion-by-word)
              ("C-<tab>" . 'copilot-accept-completion-by-word)))
(defvar universal-indent 2)

(after! (evil copilot)
  (add-to-list 'copilot-indentation-alist '(elixir-mode universal-indent)))

#+end_src


** Doom Packages
:PROPERTIES:
:header-args: :tangle init.el
:END:

#+begin_src elisp

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a link to Doom's Module Index where all
;;      of our modules are listed, including what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(setq +literate-config-file "config.org")

(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       ;;company           ; the ultimate code completion backend
       (corfu +orderless +icons)  ; complete with cap(f), cape and a flying feather!
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       ;;ivy               ; a search engine for love and life
       (vertico +icons)           ; the search engine of the future

       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode +github)  ; 🙂
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;indent-guides     ; highlighted indent columns
       ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline          ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       tabs              ; a tab bar for Emacs
       treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       (vc-gutter +pretty) ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       ;;zen               ; distraction-free coding or writing

       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       word-wrap         ; soft wrapping with language-aware indent

       :emacs
       dired             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;eww               ; the internet is gross
       ibuffer           ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree

       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       ;;vterm             ; the best terminal emulation in Emacs

       :checkers
       (syntax +childframe + flymake +icons)              ; tasing you for every semicolon you forget
       ;;(spell +flyspell) ; tasing you for misspelling mispelling
       ;;grammar           ; tasing grammar mistake every you make

       :tools
       ;;ansible
       ;;biblio            ; Writes a PhD for you (citation needed)
       ;;collab            ; buffers with friends
       debugger          ; FIXME stepping through code, to help you add bugs
       direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       lookup              ; navigate your code and its documentation
       (lsp +peek)               ; M-x vscode
       magit             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       ;;pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       tree-sitter       ; syntax and parsing, sitting in a tree...
       ;;upload            ; map local to remote projects via ssh/ftp

       :os
       (:if (featurep :system 'macos) macos)  ; improve compatibility with macOS
       ;;tty               ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;(cc +lsp)         ; C > C++ == 1
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       (csharp +lsp +dotnet +tree-sitter)            ; unity, .NET, and mono shenanigans
       data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       (elixir +lsp +tree-sitter)           ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp        ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(go +lsp)         ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json              ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       (javascript +lsp +tree-sitter)        ; all(hope(abandon(ye(who(enter(here))))))
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;latex             ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       (nix +lsp +tree-sitter)               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       org               ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       ;;plantuml          ; diagrams for confusing people more
       ;;graphviz          ; diagrams for confusing yourself even more
       ;;purescript        ; javascript, but functional
       ;;python            ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       ;;(rust +lsp)       ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       (web +lsp +tree-sitter)               ; the tubes
       (yaml +lsp +tree-sitter)              ; JSON, but readable
       ;;zig               ; C, but simpler

       :email
       ;;(mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader

       :config
       literate
       (default +bindings +smartparens))

#+end_src
